service: crud-serverles-users

provider:
  name: aws
  runtime: nodejs16.x
  apiGateway:
    apiKeys:
      - name: crud-serverles-users-api-key
  iam:
    role:
      statements:
        - Effect: Allow
          Action: dynamodb:*
          Resource: arn:aws:dynamodb:us-east-1:992382477890:table/usersTable
        - Effect: Allow
          Action: s3:*
          Resource: arn:aws:s3:::serverless-bucket-9999-v2/*
  environment:
    BUCKET: serverless-bucket-9999-v2
    SECRET_EGG: ${ssm:/SECRET_EGG}

# plugins:
#   - serverless-offline
#   - serverless-dynamodb

plugins:
  - serverless-apigateway-service-proxy
  - serverless-lift

package:
  individually: true
  patterns:
    - "!*/**"
    - "!nodejs*"
    - "!*.zip"

custom:
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
  apiGatewayServiceProxies:
    - sqs:
        path: /likeuser
        method: post
        queueName: likequeue
        cors: true
        response:
          template:
            # `success` is used when the integration response is 200
            success: |-
              { "message: "accepted" }
            # `clientError` is used when the integration response is 400
            clientError: |-
              { "message": "there is an error in your request" }
            # `serverError` is used when the integration response is 500
            serverError: |-
              { "message": "there was an error handling your request" }

constructs:
  sqs-queue:
    type: queue
    batchSize: 1
    worker:
      handler: likeuser/handler.likeuser
      # reservedConcurrency: 1
      package:
        patterns:
          - "likeuser/handler.js"
    extensions:
      queue:
        Properties:
          QueueName: likequeue

functions:
  custom-authorizer:
    handler: authorizer/handler.authorize
    package:
      patterns:
        - "authorizer/handler.js"
  get-all-users:
    handler: getAllUsers/handler.getAllUsers
    package:
      patterns:
        - "getAllUsers/handler.js"
    events:
      - http:
          private: true
          path: users
          method: GET
  get-users:
    handler: getUsers/handler.getUsers
    package:
      patterns:
        - "getUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-users:
    handler: createUsers/handler.createUsers
    package:
      patterns:
        - "createUsers/handler.js"
    events:
      - http:
          path: users
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 15
          method: POST
          request:
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  update-users:
    handler: updateUsers/handler.updateUsers
    package:
      patterns:
        - "updateUsers/handler.js"
    events:
      - http:
          path: users/{id}
          method: PUT
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/user-schema.json)}
  delete-users:
    handler: deleteUsers/handler.delete_users
    runtime: python3.9
    package:
      patterns:
        - "deleteUsers/handler.py"
    events:
      - http:
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  signedURL:
    handler: signedurl/handler.signedUrl
    package:
      patterns:
        - "signedurl/handler.js"
    events:
      - http:
          path: signedurl
          method: GET
          request:
            parameters:
              querystrings:
                filename: true
  thumbnailGenerator:
    handler: thumbnail/handler.thumbnailGenarator
    layers:
      - { Ref: BaseLambdaLayer }
    package:
      patterns:
        - "thumbnail/handler.js"
    events:
      - s3:
          bucket: serverless-bucket-9999-v2
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: "upload/"
    dependsOn:
      - S3Bucket

layers:
  base:
    name: prd-dependencies
    compatibleRuntimes:
      - nodejs16.x
    package:
      artifact: app/nodejs-layer.zip

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    S3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: serverless-bucket-9999-v2
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
    MyBucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket:
          Ref: "S3Bucket"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:s3:::"
                    - Ref: "S3Bucket"
                    - "/*"
